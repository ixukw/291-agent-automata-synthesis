
// pos = [r,c] = [y,x]

// time
int t = 3;
// dimension of grid
int m = 1;
int n = 2;

struct Grid { @Immutable("")
  int[n][m][t] grid;
}

int[2] action_map(int action) { // id 1
  int[2] a = {0,0};
  if(action == 1) { // move left
    a = {0,-1};
  }
  else if (action == 2) { // right
    a = {0,1};
  }
  /*
  else if (action == 3) { // up
    a[0] = -1;
    a[1] = 0;
  }
  else if (action == 4) { // down
    a[0] = 1;
    a[1] = 0;
  }*/
  return a;
}

harness int transition(int[n][m] grid, int action) {
  assume m > 0;
  assume n > 0;
  int action = ??;
  assume action > 0;
  assume action < 3;
  for (int i=0; i<m; i++) {
    for (int j=0; j<n; j++) {
      assume grid[i][j] <= 1;
      assert grid[i][j] <= 1;
    }
  }
/*
  if (??) {
    action = 1; //moveLeft(pos)
  }
  else if (??){
    action = 2; //moveRight(pos)
  }*/
  int[2] change = action_map(action);
  assert change[0] <= 1;
  assert change[1] <= 1;
  int[2] next_pos = {pos[0]+change[0], pos[1]+change[1]};
  for (int i=0; i<2; i++) {
    //assert(next_pos[i] == true_next_pos[i]);
  }

  return action;
}

void check(int[n][m] grid, int[2] pos, int[2] next_pos, int true_action){
  int synthesized_action = transition(grid, pos, next_pos);
  assert(synthesized_action == true_action);
}

void check_all(int[n][m][t] grids, int[2][t] pos, int[t] actions) {
  /*for (int i=1; i<t; i++) {
    check(grids[i], pos[i-1], pos[i], actions[i]);
  }*/
  check(grids[1], pos[0], pos[1], actions[1]);
}

harness void main() {

Grid g = new Grid(grid = {{{1,0}}, {{0,1}}, {{1,0}}});

int[n][t] pos = {{1,0},{0,1},{1,0}};
int[t] actions = {0,2,1};
  check_all(g.grid, pos, actions);
}