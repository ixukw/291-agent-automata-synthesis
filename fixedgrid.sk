include "../string.skh";

int N = 5; // final grid size

// inputs fed by python script
int true_action1_x = 1;
int true_action1_y = 0;

harness void main() {
  
  // ask sketch to generate the starting position
  int posX = 0;
  int posY = 0;
  assert posX >= 0 && posX < N && posY >= 0 && posY < N;
  int[2] pos = {posX, posY};
  
  // get the next position from the true action
  //int pos_next_x = posX + true_action1_x;
  //int pos_next_y = posY + true_action1_y;
  //int[2] pos_next = {pos_next_x, pos_next_y};
  int[2] pos_next = true_transition({posX, posY}, {true_action1_x, true_action1_y});

  // ask sketch to find the action that maps pos to pos_next
  /*int[2] action = transition({posX, posY}, pos_next);
  assume action[0] >= -1 && action[1] <= 1;
  assume action[1] >= -1 && action[1] <= 1;

  // the synthesized_action should match the true action
  assert action[0] == true_action1_x && action[1] == true_action1_y;
*/
  int[2] pos_try_next = try_transition({posX, posY}, transition({posX, posY}, pos_next));
  assert pos_try_next[0] == pos_next[0] && pos_try_next[1] == pos_next[1];

  /*println(newStr("ACTION"));
  println(newStr({intAsChar(action[0]), '\0'}));
  println(newStr({intAsChar(action[1]), '\0'}));*/

  println(newStr({intAsChar(pos_try_next[0]), '\0'}));
  println(newStr({intAsChar(pos_try_next[1]), '\0'}));
  println(newStr({intAsChar(pos_next[0]), '\0'}));
  println(newStr({intAsChar(pos_next[1]), '\0'}));
}

int[2] true_transition(int[2] pos, int[2] action) {
  // get the next position from the true action
  int pos_next_x = pos[0] + action[0];
  int pos_next_y = pos[1] + action[1];
  int[2] pos_next = {pos_next_x, pos_next_y};
  return pos_next;
}

/* single step transition
 * input is the position at time t and t+1
 * output is the transition action (dx, dy)
 */ 
 int[2] transition(int[2] pos_now, int[2] pos_next) {
    int dx = ??;
    assert dx >= -1 && dx <= 1;
    int dy = ??;
    assert dy >= -1 && dy <= 1;
    
    println(newStr({intAsChar(dx), '\0'}));
    println(newStr({intAsChar(dy), '\0'}));
    assert dx >= -1 && dx <= 1 && dy >= -1 && dy <= 1;
    int[2] pos_try = try_transition(pos_now, {dx,dy});
    assert pos_try[0] == pos_next[0];
    assert pos_try[1] == pos_next[1];
    
    return {dx,dy};
}

int[2] try_transition(int[2] pos_now, int[2] action) {
  return {pos_now[0]+action[0], pos_now[1]+action[1]};
}